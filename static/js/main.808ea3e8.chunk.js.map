{"version":3,"sources":["Movie.js","App.js","index.js"],"names":["Movie","year","title","summary","poster","genres","className","src","alt","map","genre","index","slice","App","state","isLoading","movies","getMovies","a","axios","get","data","setState","this","movie","id","medium_cover_image","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6SAmCeA,MA7Bf,YAA0D,IAAzCC,EAAwC,EAAxCA,KAAMC,EAAkC,EAAlCA,MAAOC,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,OAAQC,EAAU,EAAVA,OAC3C,OACE,sBAAKC,UAAU,QAAf,UACE,qBAAKC,IAAKH,EAAQI,IAAKN,EAAOA,MAAOA,IACrC,sBAAKI,UAAU,cAAf,UACE,oBAAIA,UAAU,eAAd,SAA8BJ,IAC9B,oBAAII,UAAU,cAAd,SAA6BL,IAC7B,oBAAIK,UAAU,gBAAd,SACGD,EAAOI,KAAI,SAACC,EAAOC,GAAR,OACR,oBAAgBL,UAAU,gBAA1B,SACCI,GADQC,QAKf,oBAAGL,UAAU,iBAAb,UAA+BH,EAAQS,MAAM,EAAG,KAAhD,gBCsFKC,G,kNAhFbC,MAAQ,CACNC,WAAW,EACXC,OAAQ,I,EAGVC,U,sBAAY,8BAAAC,EAAA,sEAKAC,IAAMC,IACd,4DANQ,gBAGEJ,EAHF,EAERK,KACEA,KAAQL,OAKZ,EAAKM,SAAS,CAAEN,SAAQD,WAAW,IARzB,2C,kEAeVQ,KAAKN,c,+BAiBE,MAGuBM,KAAKT,MAA3BC,EAHD,EAGCA,UAAWC,EAHZ,EAGYA,OACnB,OACE,yBAASV,UAAU,YAAnB,SACGS,EACD,qBAAKT,UAAU,SAAf,SACE,sBAAMA,UAAU,eAAhB,0BAED,qBAAKA,UAAU,SAAf,SACEU,EAAOP,KAAI,SAAAe,GAAK,OACb,cAAC,EAAD,CAEEC,GAAID,EAAMC,GACVxB,KAAMuB,EAAMvB,KACZC,MAAOsB,EAAMtB,MACbC,QAASqB,EAAMrB,QACfC,OAAQoB,EAAME,mBACdrB,OAAQmB,EAAMnB,QANTmB,EAAMC,e,GA5DTE,IAAMC,YCXxBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.808ea3e8.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./Movie.css\";\r\n\r\n// Movie component\r\n// jsx에서는 class대신 className씀\r\nfunction Movie({ year, title, summary, poster, genres }) {\r\n    return (\r\n      <div className=\"movie\"> \r\n        <img src={poster} alt={title} title={title} />\r\n        <div className=\"movie__data\">\r\n          <h3 className=\"movie__title\">{title}</h3>\r\n          <h5 className=\"movie__year\">{year}</h5>\r\n          <ul className=\"movie__genres\">\r\n            {genres.map((genre, index) => (\r\n                <li key={index} className=\"genres__genre\">\r\n                {genre}\r\n                </li>\r\n            ))}\r\n          </ul>\r\n          <p className=\"movie__summary\">{summary.slice(0, 180)}...</p>\r\n        </div>\r\n      </div>\r\n    );\r\n}\r\n\r\nMovie.propTypes = {\r\n    id: PropTypes.number.isRequired,\r\n    year: PropTypes.number.isRequired,\r\n    title: PropTypes.string.isRequired,\r\n    summary: PropTypes.string.isRequired,\r\n    poster: PropTypes.string.isRequired,\r\n    genres: PropTypes.arrayOf(PropTypes.string).isRequired\r\n};\r\n\r\nexport default Movie;","import React from 'react';\nimport axios from \"axios\";\nimport Movie from \"./Movie\";\nimport \"./App.css\";\n\n// import PropTypes from \"prop-types\";\n// import Potato from './Potato';\n\n// function Food({ favourite }) { // props.favourite와 같음(인자로 받은 객체 내부의 favourite 가져오기)\n//   return <h1>I like {favourite}</h1>;\n// } \n\n// component : HTML을 반환하는 함수! 항상 대문자\n\n// class component(react는 자동으로 모든 class component의 render method를 실행함)\n// state : object다. component의 data를 넣을 공간이며, 이 데이터는 변한다\nclass App extends React.Component {\n  // state = {\n  //   count: 0\n  // };\n  // add = () => {  // setState를 호출하면, react는 새로운 state와 함께 render function을 다시 호출한다\n  //   this.setState(current => ({ count: current.count + 1 })); // current : 현재 state\n  // };\n  // minus = () => {\n  //   this.setState(current => ({ count: current.count - 1 }));\n  // };\n  state = {\n    isLoading: true,\n    movies: []\n  };\n\n  getMovies = async () => {\n    const {\n      data: {\n        data: { movies }\n      }\n    } = await axios.get(\n      \"https://yts-proxy.now.sh/list_movies.json?sort_by=rating\"\n    ); // 비동기 처리, axios가 끝날 때까지 기다린다\n    this.setState({ movies, isLoading: false }); // movies : movies\n  };\n\n  componentDidMount() {\n    // setTimeout(() => {\n    //   this.setState({ isLoading: false });\n    // }, 6000);\n    this.getMovies();\n  }\n\n\n\n  /* component 생애주기 */\n\n  // componentDidMount() { \n  //   console.log(\"Component rendered\");\n  // }\n  // componentDidUpdate() {\n  //   console.log(\"I just updated\");\n  // }\n  // componentWillUnmount() { // component가 사라질때\n  //   console.log(\"Goodbye, cruel world\");\n  // }\n\n  render() {\n    // const { isLoading } = this.state; // const isLoading = this.state.isLoading와 같은 의미\n    // return (<div>{isLoading ? \"Loading...\" : \"We are ready\"}</div>);\n    const { isLoading, movies } = this.state;\n    return (\n      <section className=\"container\">\n        {isLoading ? (\n        <div className=\"loader\">\n          <span className=\"loader__text\">Loading...</span>\n        </div>) : \n        (<div className=\"movies\">\n          {movies.map(movie => (\n              <Movie\n                key={movie.id}\n                id={movie.id}\n                year={movie.year}\n                title={movie.title}\n                summary={movie.summary}\n                poster={movie.medium_cover_image}\n                genres={movie.genres}\n              />\n            ))}\n        </div>\n        )}\n      </section>\n      );\n  }\n}\n\n/* function component*/\n\n// function App() {\n//   return (\n//     <div>\n//       { // 중괄호 : javascript\n//       foodILike.map(dish => ( // 각 element에 함수 적용한 array 반환\n//         <Food key={dish.id} name={dish.name} picture={dish.image} rating={dish.rating} /> // key prop는 Food로 전달 X(리액트 내부에서만 사용). Unique key prop을 설정한 것\n//       ))}\n//     </div>\n//   );\n// }\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n// import Potato from './Potato';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App /> \n  </React.StrictMode>,\n  document.getElementById('root')\n); // 하나의 component만 rendering 가능, jsx : 자바스크립트 + html(html inside javascript)\n"],"sourceRoot":""}